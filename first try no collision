<!DOCTYPE html>
<html>
  <head>
    <title>Mario Game</title>
    <style>
      .bg {

        background-image: url("bg.jpg");
      }
      #player {
        position: absolute;
        width: 100px;
        height: 150px;
        bottom: 0;
      }
      .obstacle {
        position: absolute;
        width: 40px;
        height: 40px;
        background-color: #f00;
        bottom: 0;
      }
    </style>
  </head>
  <body class="bg">
    <h1>Mario Game</h1>
    <div id="game-container">
      <img id="player" src="cat2.gif"/></div>
    </div>

    <script>
      // Player object
      // const player = document.getElementById("player");
      class Player {
        constructor({

          position = { x: 0, y: 0 },
          width = 100,
          height = 100,
          velocity = { x: 0, y: 0 }
        }) {
          this.position = position
          this.width = width
          this.height = height
          this.velocity = velocity
          this.player = document.getElementById("player");
        }

        draw() {
          c.strokeRect(this.position.x, this.position.y, this.width, this.height)
        }

        update() {
          this.position.x += this.velocity.x
          this.position.y += this.velocity.y
        }
      }
      // Game constants
      const gameContainer = document.getElementById("game-container");
      const containerWidth = gameContainer.offsetWidth;
      const playerWidth = player.offsetWidth;

      // Player position
      let playerX = containerWidth / 2 - playerWidth / 2;
      let isJumping = false;
      let jumpTimeout;

      // Keyboard input handling
      document.addEventListener("keydown", function (event) {
        if (event.key === "ArrowLeft") {
          movePlayer(-10); // Move left
        } else if (event.key === "ArrowRight") {
          movePlayer(10); // Move right
        } else if (event.key === "ArrowUp") {
          jump();
        }
      });

      document.addEventListener("keyup", function (event) {
        if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
          stopMoving(); // Stop moving
        }
      });
      // Function to move the player
      let moveInterval;
      function movePlayer(deltaX) {
        stopMoving();
        moveInterval = setInterval(function () {
          playerX += deltaX;
          player.style.left = playerX + "px";

          // Check if player is out of bounds
          if (playerX < 0) {
            playerX = 0;
          } else if (playerX > containerWidth - playerWidth) {
            playerX = containerWidth - playerWidth;
          }
        }, 10);
      }

      // Function to stop player movement
      function stopMoving() {
        clearInterval(moveInterval);
      }

      function Obstacle(x, y, width, height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.color = "#00ff00";

            this.draw = function() {
                context.fillStyle = this.color;
                context.fillRect(this.x, this.y, this.width, this.height);
            }
        }

        obstacle = new Obstacle(650, 350, 100, 50);

      function collision({ player, obstacle }) {
        return (
          player.position.x + player.width >= obstacle.position.x && // player right collides with obstacle left
          obstacle.position.x + obstacle.width >= player.position.x && // obstacle right collides with player left
          player.position.y + player.height >= obstacle.position.y && // player bottom collides with obstacle top
          obstacle.position.y + obstacle.height >= player.position.y // player top collides with obstacle bottom
        )
      }
      if (collision({ player, obstacle })) {
         obstacle.color = 'green'
      } 
      // Function to make the player jump
      function jump() {
        if (!isJumping) {
          isJumping = true;
          let jumpHeight = 100; // Adjust as needed
          let jumpDuration = 1000; // Adjust as needed
          let jumpStartTime = Date.now();
          let jumpEndTime = jumpStartTime + jumpDuration;

          function animateJump() {
            let now = Date.now();
            let remainingTime = jumpEndTime - now;
            let progress = 1 - remainingTime / jumpDuration;

            // Calculate the player's vertical position during the jump
            let verticalPosition = jumpHeight * 4 * progress * (1 - progress);
            player.style.bottom = verticalPosition + "px";

            if (now < jumpEndTime) {
              requestAnimationFrame(animateJump);
            } else {
              player.style.bottom = "0";
              isJumping = false;
            }
          }

          animateJump();
        }
      }
    </script>
  </body>
</html>



